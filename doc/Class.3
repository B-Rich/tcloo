'\"
'\" Copyright (c) 2007 Donal K. Fellows
'\"
'\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\"
'\" RCS: @(#) $Id: Class.3,v 1.1 2007/06/02 12:10:10 dkf Exp $
'\"
.so man.macros
.TH Tcl_Class 3 0.1 TclOO "TclOO Library Functions"
.BS
'\" Note:  do not modify the .SH NAME line immediately below!
.SH NAME
Tcl_ClassGetMetadata, Tcl_ClassSetMetadata, Tcl_GetClassAsObject, Tcl_GetObjectAsClass, Tcl_NewObjectInstance \- manipulate classes
.SH SYNOPSIS
.nf
\fB#include <tclOO.h>\fR
.sp
Tcl_Object
\fBTcl_GetClassAsObject\fR(\fIclass\fR)
.sp
Tcl_Class
\fBTcl_GetObjectAsClass\fR(\fIobject\fR)
.sp
Tcl_Object
\fBTcl_NewObjectInstance\fR(\fIinterp, class, name, objc, objv, skip\fR)
.sp
ClientData
\fBTcl_ClassGetMetadata\fR(\fIclass, typePtr\fR)
.sp
\fBTcl_ClassSetMetadata\fR(\fIclass, typePtr, metadata\fR)
.SH ARGUMENTS
.AS "const Tcl_ObjectMetadataType" metadata in/out
.AP Tcl_Class class in
Reference to the class to operate upon.
.AP Tcl_Object object in
Reference to the object to operate upon, which must be a class object.
.AP Tcl_Interp *interp in/out
Interpreter providing the context for creating an object, and into whose
result error messages will be written if the creation fails.
.AP "const char" *name in
The name of the object to create, or NULL if a new unused name is to be
automatically selected.
.AP int objc in
The number of elements in the \fIobjv\fR array.
.AP "Tcl_Obj *const" *objv in
The arguments to the command to create the instance of the class.
.AP int skip in
The number of arguments at the start of the argument array, \fIobjv\fR, that
are not arguments to any constructors.
.AP "const Tcl_ObjectMetadataType" *typePtr in
The type of \fImetadata\fR being set with \fBTcl_ClassSetMetadata\fR or
retrieved with \fBTcl_ClassGetMetadata\fR.
.AP ClientData metadata in
An item of metadata to attach to the class, or NULL to remove the metadata
associated with a particular \fItypePtr\fR.
.BE

.SH DESCRIPTION
.PP
Classes are entities that can manufacture objects. Each class can be viewed as
an object itself; the object view can be retrieved using
\fBTcl_GetClassAsObject\fR which always returns the object when applied to a
non-destroyed class, and an object can be viewed as a class with the aid of
the \fBTcl_GetObjectAsClass\fR (which either returns the class, or NULL if the
object is not a class). The correct way to look up a class by name is to look
up the object with that name, and then to use \fBTcl_GetObjectAsClass\fR.
.PP
Instances of classes are created using \fBTcl_NewObjectInstance\fR, which
takes creates an object from any class (and which is internally called by both
the \fBcreate\fR and \fbnew\fR methods of the \fBoo::class\fR class). It takes
parameters that optionally give the name of the object to create, and which
describe the arguments to pass to to the class's constructor (if any). The
result of the function will be either a reference to the newly created object,
or NULL if the creation failed (when an error message will be left in the
interpreter result).
.SH "CLASS METADATA"
.PP
Every class may have arbitrary amounts of metadata attached to it, which the
class attaches no meaning to beyond what is described in a
Tcl_ObjectMetadataType structure instance. Metadata to be attached is
described by the the type of the metadata (given in the \fItypePtr\fR
argument) and an arbitrary pointer (the \fImetadata\fR argument) that are
given to \fBTcl_ClassSetMetadata\fR, and a particular piece of metadata can be
retrieved given its type using \fBTcl_ClassGetMetadata\fR. If the
\fImetadata\fR parameter to \fBTcl_ClassSetMetadata\fR is NULL, the metadata
is removed, and the result of \fBTcl_ClassGetMetadata\fR is NULL, the given
type of metadata was not attached.
.PP
The contents of the Tcl_ObjectMetadataType structure is as follows:
.CS
typedef struct {
        int \fIversion\fR;
        const char *\fIname\fR;
        Tcl_ObjectMetadataDeleteProc \fIdeleteProc\fR;
        Tcl_ObjectMetadataCloneProc \fIcloneProc\fR;
} Tcl_ObjectMetadataType;
.CE
The \fIversion\fR field allows for future expansion of the structure, and
should always be declared equal to TCL_OO_METHOD_VERSION_CURRENT. The
\fIname\fR field provides a human-readable name for the type, and is reserved
for debugging.
.PP
The \fIdeleteProc\fR field gives a function that is used to delete a
particular piece of metadata, and is called when the attached metadata is
replaced or removed; the field must not be NULL.
.CS
typedef void (*Tcl_ObjectMetadataDeleteProc) (ClientData \fIclientData\fR);
.CE
The \fIclientData\fR argument gives the address of the metadata to be
deleted.
.PP
The \fIcloneProc\fR field gives a function that is used to copy a piece of
metadata (which may be used when a copy of an object is created using
\fBoo::copy\fR); if NULL, the metadata will not be cloned at all to the copy.
.CS
typedef ClientData (*Tcl_ObjectMetadataCloneProc)(ClientData \fIclientData\fR);
.CE
The \fIclientData\fR argument gives the address of the metadata to be cloned,
and the result of the function must either be the cloned metadata or NULL if
the metadata is to not be cloned.
.SH "SEE ALSO"
class(n), define(n), Method(3), object(n)
.SH KEYWORDS
.I TODO

\" Local variables:
\" mode: nroff
\" fill-column: 78
\" End:
